name: ci

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  insiders-build:
    strategy:
      matrix:
        os: [winsrv-2016, mac-build1, ubuntu-latest]
        include:
          - os: winsrv-2016
            build: |
              cd src
              ./node_modules/.bin/esbuild "${env:DIST_FILE_NAME}.js" --bundle --external:vm2 --external:axios --outfile=build.cjs --format=cjs --platform=node --target=node18.5.0
              pkg --output "../${env:DIST_FILE_NAME}.exe" -t node18-win-x64 ./build.cjs --config package.json --compress GZip

              dir
              cd ..
              dir

              # Sign the executable
              New-Item -ItemType directory -Path certificate
              Set-Content -Path certificate\certificate.txt -Value $env:CODESIGN_BASE64
              certutil -decode certificate\certificate.txt certificate\certificate.pfx
              Set-Content -Path certificate\intermediate.txt -Value $env:CODESIGN_INTERMEDIATE_BASE64
              certutil -decode certificate\intermediate.txt certificate\intermediate.crt

              $processOptions = @{
                FilePath = "C:\Program Files (x86)/Windows Kits/10/bin/10.0.22621.0/x64/signtool.exe"
                Wait = $true
                ArgumentList = "sign", "/fd", "SHA256", "/p", "$env:CODESIGN_PWD", "/ac", "certificate\intermediate.crt", "/f", "certificate\certificate.pfx", "/tr", "http://timestamp.sectigo.com/rfc3161", "/td", "sha256", "./${env:DIST_FILE_NAME}.exe"
                WorkingDirectory = "."
                NoNewWindow = $true
              }
              Start-Process @processOptions

              Remove-Item -Recurse -Force certificate

              # # Create release binary
              # mkdir release-binaries-win
              # Copy-Item -Path ".\${env:DIST_FILE_NAME}.exe" -Destination "release-binaries-win\"

              # dir
              # dir release-binaries-win

              # Create insider's build zip
              $compress = @{
                Path = "./${env:DIST_FILE_NAME}.exe"
                CompressionLevel = "Fastest"
                DestinationPath = "${env:DIST_FILE_NAME}--win-x64--${{ github.sha }}.zip"
              }
              Compress-Archive @compress
              # dir
            # artifact_release_name: release-binaries-win
            # artifact_release_path: release-binaries-win/*
            artifact_insider: butler-sheet-icons--win-x64--${{ github.sha }}.zip
          - os: mac-build1
            build: |
              cd src
              ./node_modules/.bin/esbuild ${DIST_FILE_NAME}.js  --bundle --external:vm2 --external:axios --outfile=build.cjs --format=cjs --platform=node --target=node18.5.0
              pkg --output "../${DIST_FILE_NAME}" -t node18-macos-x64 ./build.cjs --config package.json --compress GZip

              cd ..
              chmod +x "${DIST_FILE_NAME}"
              security delete-keychain build.keychain || true

              pwd
              ls -la

              # Turn our base64-encoded certificate back to a regular .p12 file
              
              echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12

              # We need to create a new keychain, otherwise using the certificate will prompt
              # with a UI dialog asking for the certificate password, which we can't
              # use in a headless CI environment
              
              security create-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
              security list-keychains -d user -s build.keychain
              security default-keychain -d user -s build.keychain
              security unlock-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
              security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PWD" -T /usr/bin/codesign
              security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$MACOS_CI_KEYCHAIN_PWD" build.keychain
          
              codesign --force -s "$MACOS_CERTIFICATE_NAME" -v "./${DIST_FILE_NAME}" --deep --strict --options=runtime --timestamp --entitlements ./release-config/${DIST_FILE_NAME}.entitlements


              # Notarize
              # Store the notarization credentials so that we can prevent a UI password dialog from blocking the CI

              echo "Create keychain profile"
              xcrun notarytool store-credentials "notarytool-profile" --apple-id "$PROD_MACOS_NOTARIZATION_APPLE_ID" --team-id "$PROD_MACOS_NOTARIZATION_TEAM_ID" --password "$PROD_MACOS_NOTARIZATION_PWD"

              # We can't notarize an app bundle directly, but we need to compress it as an archive.
              # Therefore, we create a zip file containing our app bundle, so that we can send it to the
              # notarization service


              # Notarize insider binary
              echo "Creating temp notarization archive for insider build"
              ditto -c -k --keepParent "./${DIST_FILE_NAME}" "./${DIST_FILE_NAME}--macos-x64--${{ github.sha }}.zip"

              # Here we send the notarization request to the Apple's Notarization service, waiting for the result.
              # This typically takes a few seconds inside a CI environment, but it might take more depending on the App
              # characteristics. Visit the Notarization docs for more information and strategies on how to optimize it if
              # you're curious
              echo "Notarize insider app"
              xcrun notarytool submit "./${DIST_FILE_NAME}--macos-x64--${{ github.sha }}.zip" --keychain-profile "notarytool-profile" --wait

              # Delete build keychain
              security delete-keychain build.keychain
            # artifact_release_name: release-binaries-macos
            # artifact_release_path: release-binaries-macos/*
            artifact_insider: butler-sheet-icons--macos-x64--${{ github.sha }}.zip
          - os: ubuntu-latest
            build: |
              cd src
              ./node_modules/.bin/esbuild ${DIST_FILE_NAME}.js  --bundle --external:vm2 --external:axios --outfile=build.cjs --format=cjs --platform=node --target=node18.5.0
              pkg --output "../${DIST_FILE_NAME}" -t node18-linux-x64 ./build.cjs --config package.json --compress GZip

              cd ..
              chmod +x ${DIST_FILE_NAME}

              # # Copy binary to release catalog              
              # mkdir release-binaries-linux
              # cp ${DIST_FILE_NAME} release-binaries-linux
              # ls -la release-binaries-linux

              # Compress insider's build
              tar -czf "${DIST_FILE_NAME}--linux-x64--${{ github.sha }}.tgz" "${DIST_FILE_NAME}"
              ls -la

            # artifact_release_name: release-binaries-linux
            # artifact_release_path: release-binaries-linux/*
            artifact_insider: butler-sheet-icons--linux-x64--${{ github.sha }}.tgz
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: lts/*

      - name: Install tool for creating stand-alone executables
        run: |
          npm install pkg --location=global

      - name: Install dependencies
        run: |
          pwd 
          cd src
          npm ci

      - name: Run Snyk to check for vulnerabilities
        if: |
          github.repository_owner == 'ptarmiganlabs' &&
          matrix.os == 'ubuntu-latest'
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --file=./src/package.json --sarif-file-output=snyk.sarif
          # command: test
          
      - name: Upload Snyk result to GitHub Code Scanning
        if: |
          github.repository_owner == 'ptarmiganlabs' &&
          matrix.os == 'ubuntu-latest'
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif

      - name: Create binaries
        env:
          DIST_FILE_NAME: butler-sheet-icons     
          GITHUB_TOKEN: ${{ secrets.PAT }}
          MACOS_CERTIFICATE: ${{ secrets.PROD_MACOS_CERTIFICATE_BASE64_CODESIGN }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.PROD_MACOS_CERTIFICATE_CODESIGN_PWD }}
          MACOS_CERTIFICATE_NAME: ${{ secrets.PROD_MACOS_CERTIFICATE_CODESIGN_NAME }}
          MACOS_CI_KEYCHAIN_PWD: ${{ secrets.PROD_MACOS_CI_KEYCHAIN_PWD }}
          PROD_MACOS_NOTARIZATION_APPLE_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_APPLE_ID }}
          PROD_MACOS_NOTARIZATION_TEAM_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_TEAM_ID }}
          PROD_MACOS_NOTARIZATION_PWD: ${{ secrets.PROD_MACOS_NOTARIZATION_PWD }}
          CODESIGN_PWD: ${{ secrets.WIN_CODESIGN_PWD}}
          CODESIGN_INTERMEDIATE_BASE64: ${{ secrets.WIN_CODESIGN_INTERMEDIATE_BASE64 }}
          CODESIGN_BASE64: ${{ secrets.WIN_CODESIGN_BASE64}}
        run: |
          pwd
          ${{ matrix.build }}

      # - name: Upload release artifacts to GitHub
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: ${{ matrix.artifact_release_name }}
      #     path: ${{ matrix.artifact_release_path }}

      - name: Upload insider build artifacts to GitHub
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact_insider }}
          path: ${{ matrix.artifact_insider }}

  test-macos:
    needs: 
      - insiders-build
    runs-on:
      - self-hosted
      - ${{ matrix.os }}
      - ${{ matrix.architecture }}
      - sp53
    strategy:
      matrix:
        node:
          - lts/*
        architecture:
          - x64
        os:
          - macos

    steps:
      - uses: actions/checkout@v4

      - name: Debugging 1
        run: pwd && ls -la
        working-directory: src

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Install modules
        run: npm ci
        working-directory: src

      - name: Make sure Jest is installed
        run: npm install jest

      - name: Debugging 2
        run: pwd && ls -la
        working-directory: src

      - name: Run tests
        run: npm run test -- -i
        working-directory: src
        env:
          BSI_LOG_LEVEL: "info"
          BSI_CONTENT_LIBRARY: "abc 123"
          BSI_HOST: ${{ secrets.BSI_HOST }}
          BSI_PREFIX: ${{ secrets.BSI_PREFIX }}
          BSI_APP_ID: "a3e0f5d2-000a-464f-998d-33d333b175d7"
          BSI_LOGON_USER_DIR: ${{ secrets.BSI_LOGON_USER_DIR }}
          BSI_LOGON_USER_ID: ${{ secrets.BSI_LOGON_USER_ID }}
          BSI_LOGON_PWD: ${{ secrets.BSI_LOGON_PWD }}
          BSI_TEST_TIMEOUT: ${{ secrets.BSI_TEST_TIMEOUT }}
          BSI_CERT_FILE: ${{ secrets.BSI_MAC_CERT_FILE }}
          BSI_CERT_KEY_FILE: ${{ secrets.BSI_MAC_CERT_KEY_FILE }}
          BSI_INCLUDE_SHEET_PART: ${{ secrets.BSI_INCLUDE_SHEET_PART }}
          BSI_SENSE_VERSION: ${{ secrets.BSI_SENSE_VERSION }}
          BSI_CLOUD_TENANT_URL: ${{ secrets.BSI_CLOUD_TENANT_URL }}
          BSI_CLOUD_API_KEY: ${{ secrets.BSI_CLOUD_API_KEY }}
          BSI_CLOUD_LOGON_USERID: ${{ secrets.BSI_CLOUD_LOGON_USERID }}
          BSI_CLOUD_LOGON_PWD: ${{ secrets.BSI_CLOUD_LOGON_PWD }}
          BSI_CLOUD_APP_ID: ${{ secrets.BSI_CLOUD_APP_ID }}
          BSI_CLOUD_COLLECTION_ID: ${{ secrets.BSI_CLOUD_COLLECTION_ID }}

      # - name: Send job status to MQTT (starting job)
      #   uses: potaesm/github-actions-mqtt-request@1.0.0
      #   if: always()
      #   env:
      #     JOB_CONCLUSION: ${{ job.status }}
      #     NODE_VERSION: ${{ matrix.node }}
      #   with:
      #     url: mqtt://${{ secrets.MQTT_ONPREM_BROKER_IP_PORT }}
      #     topic: control/sp53/mac-build1/action-runner
      #     payload: '{ "type":"ci-test", "repo": "${{ github.repository }}", "job": "${{ github.job }}", "workflow": "${{ github.workflow }}", "nodeVersion": "${{ env.NODE_VERSION }}","status": "completed","conclusion":"${{ env.JOB_CONCLUSION }}" }'
      #     connectTimeout: 30000

  test-winsrv:
    needs: 
      - test-macos
    runs-on:
      - self-hosted
      - ${{ matrix.os }}
      - ${{ matrix.architecture }}
      - sp53
    strategy:
      matrix:
        node:
          - lts/*
        architecture:
          - x64
        os:
          - winsrv-2016

    steps:
      # - name: Send job status to MQTT (starting job)
      #   uses: potaesm/github-actions-mqtt-request@1.0.0
      #   if: always()
      #   env:
      #     JOB_CONCLUSION: ${{ job.status }}
      #     NODE_VERSION: ${{ matrix.node }}
      #   with:
      #     url: mqtt://${{ secrets.MQTT_ONPREM_BROKER_IP_PORT }}
      #     topic: control/sp53/pro2-win2/action-runner
      #     payload: '{ "type":"ci-test", "repo": "${{ github.repository }}", "job": "${{ github.job }}", "workflow": "${{ github.workflow }}", "nodeVersion": "${{ env.NODE_VERSION }}","status": "in_progress","conclusion":"${{ env.JOB_CONCLUSION }}" }'
      #     connectTimeout: 30000

      - uses: actions/checkout@v4

      - name: Debugging 1
        run: dir
        working-directory: src

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Install modules
        run: npm ci
        working-directory: src

      - name: Make sure Jest is installed
        run: npm install jest

      - name: Debugging 2
        run: dir
        working-directory: src

      - name: Run tests
        run: npm run test -- -i
        working-directory: src
        env:
          BSI_LOG_LEVEL: "info"
          BSI_CONTENT_LIBRARY: "abc 123"
          BSI_HOST: ${{ secrets.BSI_HOST }}
          BSI_PREFIX: ${{ secrets.BSI_PREFIX }}
          BSI_APP_ID: "a3e0f5d2-000a-464f-998d-33d333b175d7"
          BSI_LOGON_USER_DIR: ${{ secrets.BSI_LOGON_USER_DIR }}
          BSI_LOGON_USER_ID: ${{ secrets.BSI_LOGON_USER_ID }}
          BSI_LOGON_PWD: ${{ secrets.BSI_LOGON_PWD }}
          BSI_TEST_TIMEOUT: ${{ secrets.BSI_TEST_TIMEOUT }}
          BSI_CERT_FILE: ${{ secrets.BSI_WIN_CERT_FILE }}
          BSI_CERT_KEY_FILE: ${{ secrets.BSI_WIN_CERT_KEY_FILE }}
          BSI_INCLUDE_SHEET_PART: ${{ secrets.BSI_INCLUDE_SHEET_PART }}
          BSI_SENSE_VERSION: ${{ secrets.BSI_SENSE_VERSION }}
          BSI_CLOUD_TENANT_URL: ${{ secrets.BSI_CLOUD_TENANT_URL }}
          BSI_CLOUD_API_KEY: ${{ secrets.BSI_CLOUD_API_KEY }}
          BSI_CLOUD_LOGON_USERID: ${{ secrets.BSI_CLOUD_LOGON_USERID }}
          BSI_CLOUD_LOGON_PWD: ${{ secrets.BSI_CLOUD_LOGON_PWD }}
          BSI_CLOUD_APP_ID: ${{ secrets.BSI_CLOUD_APP_ID }}
          BSI_CLOUD_COLLECTION_ID: ${{ secrets.BSI_CLOUD_COLLECTION_ID }}

      # - name: Send job status to MQTT when done
      #   uses: potaesm/github-actions-mqtt-request@1.0.0
      #   if: always()
      #   env:
      #     JOB_CONCLUSION: ${{ job.status }}
      #     NODE_VERSION: 16
      #   with:
      #     url: mqtt://${{ secrets.MQTT_ONPREM_BROKER_IP_PORT }}
      #     topic: control/sp53/pro2-win2/action-runner
      #     payload: '{ "type":"ci-test", "repo": "${{ github.repository }}", "job": "${{ github.job }}", "workflow": "${{ github.workflow }}", "nodeVersion": "${{ env.NODE_VERSION }}","status": "completed","conclusion":"${{ env.JOB_CONCLUSION }}" }'
      #     connectTimeout: 30000


  release-please:
    needs: 
      - test-winsrv
    runs-on: ubuntu-latest
    outputs:
      releases_created: ${{ steps.release.outputs.releases_created }}
      release_tag_name: ${{ steps.release.outputs['src--tag_name'] }}
      release_upload_url: ${{ steps.release.outputs['src--upload_url'] }}
    env:
      GITHUB_REF: ${{ github.ref }}
      GITHUB_TOKEN: ${{ secrets.PAT }}
      DIST_FILE_NAME: butler-sheet-icons
    steps:
      - name: Show github.ref
        run: echo "$GITHUB_REF"

      - uses: google-github-actions/release-please-action@v3
        id: release
        if: github.repository_owner == 'ptarmiganlabs'
        with:
          command: manifest

      - name: Show output from Release-Please
        if: always()
        env:
          RELEASE_PLEASE_OUTPUT: ${{ toJSON(steps.release.outputs) }}
        run: echo "$RELEASE_PLEASE_OUTPUT"

      - name: Show output from Release-Please
        # if: ${{ steps.release.outputs.releases_created }}
        run: |
          echo "releases_created: ${{ steps.release.outputs.releases_created }}"
          echo "release_created : ${{ steps.release.outputs.release_created }}"
          echo "draft           : ${{ steps.release.outputs['src--draft'] }}"
          echo "path            : ${{ steps.release.outputs['src--path'] }}"
          echo "upload_url      : ${{ steps.release.outputs['src--upload_url'] }}"
          echo "html_url        : ${{ steps.release.outputs['src--html_url'] }}"
          echo "tag_name        : ${{ steps.release.outputs['src--tag_name'] }}"
          echo "version         : ${{ steps.release.outputs['src--version'] }}"
          echo "major           : ${{ steps.release.outputs['src--major'] }}"
          echo "minor           : ${{ steps.release.outputs['src--minor'] }}"
          echo "patch           : ${{ steps.release.outputs['src--patch'] }}"
          echo "sha             : ${{ steps.release.outputs['src--sha'] }}"

  release-macos:
    needs: release-please
    runs-on:
      - self-hosted
      - x64
      - macos
      - sp53
    # timeout-minutes: 15

    if: ${{ needs.release-please.outputs.releases_created }} 
    env:
      DIST_FILE_NAME: butler-sheet-icons
      GITHUB_TOKEN: ${{ secrets.PAT }}
      MACOS_CERTIFICATE: ${{ secrets.PROD_MACOS_CERTIFICATE_BASE64_CODESIGN }}
      MACOS_CERTIFICATE_PWD: ${{ secrets.PROD_MACOS_CERTIFICATE_CODESIGN_PWD }}
      MACOS_CERTIFICATE_NAME: ${{ secrets.PROD_MACOS_CERTIFICATE_CODESIGN_NAME }}
      MACOS_CI_KEYCHAIN_PWD: ${{ secrets.PROD_MACOS_CI_KEYCHAIN_PWD }}
      PROD_MACOS_NOTARIZATION_APPLE_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_APPLE_ID }}
      PROD_MACOS_NOTARIZATION_TEAM_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_TEAM_ID }}
      PROD_MACOS_NOTARIZATION_PWD: ${{ secrets.PROD_MACOS_NOTARIZATION_PWD }}    
    steps:
      - name: Release tag and upload url from previous job
        run: |
          echo "tag_name   : ${{ needs.release-please.outputs.release_tag_name }}"
          echo "upload_url : ${{ needs.release-please.outputs.release_upload_url }}"

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: lts/*

      - name: Install tool for creating stand-alone executables
        run: |
          npm install pkg --location=global

      - name: Install dependencies
        run: |
          pwd 
          cd src
          npm ci

      - name: Build binaries
        run: |
          pwd
          cd src
          ./node_modules/.bin/esbuild ${DIST_FILE_NAME}.js  --bundle --external:vm2 --external:axios --outfile=build.cjs --format=cjs --platform=node --target=node18.5.0
          pkg --output "../${DIST_FILE_NAME}" -t node18-macos-x64 ./build.cjs --config package.json --compress GZip

          cd ..
          chmod +x "${DIST_FILE_NAME}"
          security delete-keychain build.keychain || true

          # Turn our base64-encoded certificate back to a regular .p12 file
          
          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12

          # We need to create a new keychain, otherwise using the certificate will prompt
          # with a UI dialog asking for the certificate password, which we can't
          # use in a headless CI environment
          
          security create-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
          security list-keychains -d user -s build.keychain
          security default-keychain -d user -s build.keychain
          security unlock-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
          security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PWD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$MACOS_CI_KEYCHAIN_PWD" build.keychain
      
          codesign --force -s "$MACOS_CERTIFICATE_NAME" -v "./${DIST_FILE_NAME}" --deep --strict --options=runtime --timestamp --entitlements ./release-config/${DIST_FILE_NAME}.entitlements


          # We can't notarize an app bundle directly, but we need to compress it as an archive.
          # Therefore, we create a zip file containing our app bundle, so that we can send it to the
          # notarization service

          # Notarize release binary
          echo "Creating temp notarization archive for release binary"
          # ditto -c -k --keepParent "./${DIST_FILE_NAME}" "./${DIST_FILE_NAME}.zip"
          ditto -c -k --keepParent "./${DIST_FILE_NAME}" "./${{ needs.release-please.outputs.release_tag_name }}-macos.zip"

          # Here we send the notarization request to the Apple's Notarization service, waiting for the result.
          # This typically takes a few seconds inside a CI environment, but it might take more depending on the App
          # characteristics. Visit the Notarization docs for more information and strategies on how to optimize it if
          # you're curious
          echo "Notarize release app"
          xcrun notarytool submit "./${{ needs.release-please.outputs.release_tag_name }}-macos.zip" --keychain-profile "notarytool-profile" --wait
          # mkdir release-binaries-macos
          # mv "./${{ needs.release-please.outputs.release_tag_name }}-macos.zip" release-binaries-macos

          # Delete build keychain
          security delete-keychain build.keychain

      # - name: Download-Binaries
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: release-binaries-macos
      #     path: release-macos/

      # - name: Make binary executable
      #   run: |
      #     chmod +x release-macos/${DIST_FILE_NAME}

      # - name: Debug
      #   run: |
      #     ls -la
      #     ls -la ./release-macos

      # - name: Change name of zip file
      #   run: |
      #     pwd
      #     ls -la
      #     ls -la ./release-macos
      #     mv ./${{ env.DIST_FILE_NAME }}-macos.zip ./${{ needs.release-please.outputs.release_tag_name }}-macos.zip

      - name: Upload to existing release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          omitBodyDuringUpdate: true
          omitNameDuringUpdate: true
          artifactContentType: raw
          # artifactContentType: application/zip
          draft: true
          tag: ${{ needs.release-please.outputs.release_tag_name }}
          artifacts: ./${{ needs.release-please.outputs.release_tag_name }}-macos.zip
          token: ${{ github.token }}

      - name: Tidy up before existing
        run: |
          pwd

  release-win64:
    needs: release-please
    runs-on:
      - self-hosted
      - x64
      - windows
      - sp53
    # timeout-minutes: 15
    if: ${{ needs.release-please.outputs.releases_created }} 
    env:
      DIST_FILE_NAME: butler-sheet-icons
      GITHUB_TOKEN: ${{ secrets.PAT }}
      CODESIGN_PWD: ${{ secrets.WIN_CODESIGN_PWD}}
      CODESIGN_INTERMEDIATE_BASE64: ${{ secrets.WIN_CODESIGN_INTERMEDIATE_BASE64 }}
      CODESIGN_BASE64: ${{ secrets.WIN_CODESIGN_BASE64}}
    steps:
      - name: Release tag and upload url from previous job
        run: |
          Write-Output 'tag_name        : ${{ needs.release-please.outputs.release_tag_name }}'
          Write-Output 'upload_url      : ${{ needs.release-please.outputs.release_upload_url }}'

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: lts/*

      - name: Install tool for creating stand-alone executables
        run: |
          npm install pkg --location=global

      - name: Install dependencies
        run: |
          pwd 
          cd src
          npm ci

      - name: Build binaries
        run: |
          cd src
          ./node_modules/.bin/esbuild "${env:DIST_FILE_NAME}.js" --bundle --external:vm2 --external:axios --outfile=build.cjs --format=cjs --platform=node --target=node18.5.0
          pkg --output "../${env:DIST_FILE_NAME}.exe" -t node18-win-x64 ./build.cjs --config package.json --compress GZip

          cd ..

          # Sign the executable
          New-Item -ItemType directory -Path certificate
          Set-Content -Path certificate\certificate.txt -Value $env:CODESIGN_BASE64
          certutil -decode certificate\certificate.txt certificate\certificate.pfx
          Set-Content -Path certificate\intermediate.txt -Value $env:CODESIGN_INTERMEDIATE_BASE64
          certutil -decode certificate\intermediate.txt certificate\intermediate.crt

          $processOptions = @{
            FilePath = "C:\Program Files (x86)/Windows Kits/10/bin/10.0.22621.0/x64/signtool.exe"
            Wait = $true
            ArgumentList = "sign", "/fd", "SHA256", "/p", "$env:CODESIGN_PWD", "/ac", "certificate\intermediate.crt", "/f", "certificate\certificate.pfx", "/tr", "http://timestamp.sectigo.com/rfc3161", "/td", "sha256", "./${env:DIST_FILE_NAME}.exe"
            WorkingDirectory = "."
            NoNewWindow = $true
          }
          Start-Process @processOptions

          Remove-Item -Recurse -Force certificate

          # Create release binary zip
          $compress = @{
            Path = "./${env:DIST_FILE_NAME}.exe"
            CompressionLevel = "Fastest"
            DestinationPath = "${{ needs.release-please.outputs.release_tag_name }}-win.zip"
          }
          Compress-Archive @compress

      # - name: Download-Binaries
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: release-binaries-win
      #     path: release-win/

      # - name: Zip into release asset
      #   run: |
      #     cd release-win
      #     dir
      #     $compress = @{
      #       Path = "."
      #       CompressionLevel = "Fastest"
      #       DestinationPath = "${{ needs.release-please.outputs.release_tag_name }}-win.zip"
      #     }
      #     Compress-Archive @compress

      # - name: Debug
      #   run: |
      #     dir
      #     dir ./release-win

      - name: Upload to existing release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          omitBodyDuringUpdate: true
          omitNameDuringUpdate: true
          artifactContentType: raw
          # artifactContentType: application/zip
          draft: true
          tag: ${{ needs.release-please.outputs.release_tag_name }}
          artifacts: ./${{ needs.release-please.outputs.release_tag_name }}-win.zip
          token: ${{ github.token }}

      - name: Tidy up before existing
        run: |
          dir

  release-linux:
    needs: release-please
    runs-on: ubuntu-latest
    # timeout-minutes: 15

    if: ${{ needs.release-please.outputs.releases_created }} 
    env:
      DIST_FILE_NAME: butler-sheet-icons
      GITHUB_TOKEN: ${{ secrets.PAT }}
    steps:
      - name: Release tag and upload url from previous job
        run: |
          echo "tag_name   : ${{ needs.release-please.outputs.release_tag_name }}"
          echo "upload_url : ${{ needs.release-please.outputs.release_upload_url }}"

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: lts/*

      - name: Install tool for creating stand-alone executables
        run: |
          npm install pkg --location=global

      - name: Install dependencies
        run: |
          pwd 
          cd src
          npm ci

      - name: Build binaries
        run: |
          cd src
          ./node_modules/.bin/esbuild ${DIST_FILE_NAME}.js  --bundle --external:vm2 --external:axios --outfile=build.cjs --format=cjs --platform=node --target=node18.5.0
          pkg --output "../${DIST_FILE_NAME}" -t node18-linux-x64 ./build.cjs --config package.json --compress GZip

          cd ..
          chmod +x ${DIST_FILE_NAME}

          # Compresse release binary
          # tar -czf "${DIST_FILE_NAME}--linux-x64--${{ github.sha }}.tgz" "${DIST_FILE_NAME}"
          # ls -la

      # - name: Download-Binaries
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: release-binaries-linux
      #     path: release-linux/

      - name: Make binary executable
        run: |
          chmod +x ./${DIST_FILE_NAME}

      - name: Compress release binary
        run: |
          ls -la
          zip -9 -r ./${{ needs.release-please.outputs.release_tag_name }}-linux.zip ${DIST_FILE_NAME}

      - name: Debug
        run: |
          ls -la

      - name: Upload to existing release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          omitBodyDuringUpdate: true
          omitNameDuringUpdate: true
          artifactContentType: raw
          # artifactContentType: application/zip
          draft: true
          tag: ${{ needs.release-please.outputs.release_tag_name }}
          artifacts: ./${{ needs.release-please.outputs.release_tag_name }}-linux.zip
          token: ${{ github.token }}

      - name: Tidy up before existing
        run: |
          pwd
