name: Build binaries

on: push
jobs:
  insiders-build:
    strategy:
      matrix:
        os: [winsrv-2016, mac-build1, ubuntu-latest]
        include:
          - os: winsrv-2016
            build: |
              npx caxa --input "src" --output "butler-sheet-icons--windows--${{ github.sha }}.exe" -- "{{caxa}}/node_modules/.bin/node" "{{caxa}}/butler-sheet-icons.js"
            artifact: butler-sheet-icons--windows--${{ github.sha }}.exe
          - os: mac-build1
            build: |
              npx caxa --input "src" --output "butler-sheet-icons" -- "{{caxa}}/node_modules/.bin/node" "{{caxa}}/butler-sheet-icons.js"
              chmod +x "butler-sheet-icons"
              security delete-keychain build.keychain || true

              pwd
              ls -la

              # Turn our base64-encoded certificate back to a regular .p12 file
              
              echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12

              # We need to create a new keychain, otherwise using the certificate will prompt
              # with a UI dialog asking for the certificate password, which we can't
              # use in a headless CI environment
              
              security create-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
              security list-keychains -d user -s build.keychain
              security default-keychain -d user -s build.keychain
              security unlock-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
              security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PWD" -T /usr/bin/codesign
              security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$MACOS_CI_KEYCHAIN_PWD" build.keychain
          
              codesign --force -s "$MACOS_CERTIFICATE_NAME" -v "./${DIST_FILE_NAME}" --deep --strict --options=runtime --timestamp --entitlements ./release-config/butler-sheet-icons.entitlements

              # Notarize
              # Store the notarization credentials so that we can prevent a UI password dialog from blocking the CI

              echo "Create keychain profile"
              xcrun notarytool store-credentials "notarytool-profile" --apple-id "$PROD_MACOS_NOTARIZATION_APPLE_ID" --team-id "$PROD_MACOS_NOTARIZATION_TEAM_ID" --password "$PROD_MACOS_NOTARIZATION_PWD"

              # We can't notarize an app bundle directly, but we need to compress it as an archive.
              # Therefore, we create a zip file containing our app bundle, so that we can send it to the
              # notarization service

              echo "Creating temp notarization archive"
              ditto -c -k --keepParent "./${DIST_FILE_NAME}" "./${DIST_FILE_NAME}--macos--${{ github.sha }}.zip"

              # Here we send the notarization request to the Apple's Notarization service, waiting for the result.
              # This typically takes a few seconds inside a CI environment, but it might take more depending on the App
              # characteristics. Visit the Notarization docs for more information and strategies on how to optimize it if
              # you're curious

              echo "Notarize app"
              xcrun notarytool submit "./${DIST_FILE_NAME}--macos--${{ github.sha }}.zip" --keychain-profile "notarytool-profile" --wait

              # tar -czf "butler-sheet-icons--macos--${{ github.sha }}.tgz" "butler-sheet-icons"
            artifact: ./${DIST_FILE_NAME}--macos--${{ github.sha }}.zip
          - os: ubuntu-latest
            build: |
              npx caxa --input "src" --output "butler-sheet-icons" -- "{{caxa}}/node_modules/.bin/node" "{{caxa}}/butler-sheet-icons.js"
              chmod +x "butler-sheet-icons"
              tar -czf "butler-sheet-icons--linux--${{ github.sha }}.tgz" "butler-sheet-icons"
            artifact: butler-sheet-icons--linux--${{ github.sha }}.tgz
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          # node-version: 19
          node-version: lts/*
      - name: Create binaries
        env:
          DIST_FILE_NAME: butler-sheet-icons     
          GITHUB_TOKEN: ${{ secrets.PAT }}
          MACOS_CERTIFICATE: ${{ secrets.PROD_MACOS_CERTIFICATE_BASE64_CODESIGN }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.PROD_MACOS_CERTIFICATE_CODESIGN_PWD }}
          MACOS_CERTIFICATE_NAME: ${{ secrets.PROD_MACOS_CERTIFICATE_CODESIGN_NAME }}
          MACOS_CI_KEYCHAIN_PWD: ${{ secrets.PROD_MACOS_CI_KEYCHAIN_PWD }}
          PROD_MACOS_NOTARIZATION_APPLE_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_APPLE_ID }}
          PROD_MACOS_NOTARIZATION_TEAM_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_TEAM_ID }}
          PROD_MACOS_NOTARIZATION_PWD: ${{ secrets.PROD_MACOS_NOTARIZATION_PWD }}
        run: |
          cd src
          npm ci
          cd ..
          ${{ matrix.build }}
      - name: Upload artifacts to GitHub
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact }}
          path: ${{ matrix.artifact }}

  # test:
  #   strategy:
  #     matrix:
  #       os: [windows, macos, ubuntu]
  #   runs-on: ${{ matrix.os }}-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-node@v1
  #       with:
  #         node-version: 15
  #     - run: npm install-ci-test

  # deploy:
  #   if: github.ref == 'refs/heads/master'
  #   needs: [insiders-build, test]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: webfactory/ssh-agent@v0.5.0
  #       with:
  #         ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
  #     - uses: actions/checkout@v2
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: courselore--linux--${{ github.sha }}.tgz
  #     - run: |
  #         tar -xzf courselore--linux--${{ github.sha }}.tgz

  #         cat >> ~/.ssh/known_hosts << "EOF"
  #         courselore.org ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDWOjzHPP1v+6gEeRAVzEB7l/RH+mt31heowjiUVNjgTnpT1FDL/T4yqmztwPrzhXUdBAy7M16H+88Padxm+/rJ5qfbw2dH7KtOA4RALYy9ruBl6HFdCf59eh01A97Py/AmxlpXysGAVcdcVjLsr0PvfoEGOqMlohc0sBjCjhoFcqkP9P57Q4Q3gcqgwjNYaZ1BSbI2G6J6kihjN7+b8pFCHCw8fqs7xo+7pDUv/rvqfBTUAFV7sovwQU0bZK6Z8gWXYFGG0NpKVojsKOHCrZpM8pBBDmleisrJhXmnKQ+Lj/JvYuaEM6cHZh6+RH7ua6S9eqlL8EErXf7GZ4SPuTo1ghNJ5H9cR3k8Px4Op5bDIIdPP767jwGHabZJ5Z8l9QnQajq85gcE7E3vZ1yT2BDKQsIDJeNpg1etTgw6hSUlBQsKx8TNaI9nROSnKwKbSI+sGmZlwrx11XimEkvaMaFmSZfpN+ne/2kmjc81Pr0WKb82sIPf3X2KzmWeChkZus8=
  #         courselore.org ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBOIhUnh2H/733XnnD4mvaEqKbxbEc9ov3UhlbG7gkQS7vM5TaSSuknZLOGUIx2VWB681y4jn4vG3Wsja9JYPCB0=
  #         courselore.org ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIBCGyIA9/oiJt/qrQNeNoIRNKA8CFc/ppPMnrtw2NW+7
  #         EOF

  #         ssh root@courselore.org "mkdir -p courselore"
  #         rsync -a courselore root@courselore.org:courselore/courselore
  #         rsync -a --delete customization-example/ root@courselore.org:courselore/customization/
  #         rsync -a deployment-example/configuration.js root@courselore.org:courselore/configuration.js
  #         rsync -a deployment-example/courselore.service root@courselore.org:/etc/systemd/system/courselore.service

  #         ssh root@courselore.org << "EOF"
  #         systemctl daemon-reload
  #         systemctl enable courselore
  #         systemctl restart courselore
  #         EOF

  # npm-publish:
  #   if: startsWith(github.ref, 'refs/tags/v')
  #   needs: test
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-node@v1
  #       with:
  #         node-version: 15
  #         registry-url: https://registry.npmjs.org/
  #     - run: npm ci && npm publish
  #       env:
  #         NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # release:
  #   if: startsWith(github.ref, 'refs/tags/v')
  #   needs: [insiders-build, test]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: CourseLore--windows--${{ github.sha }}.exe
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: CourseLore--macos--${{ github.sha }}.app.tgz
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: courselore--linux--${{ github.sha }}.tgz
  #     - run: echo "::set-output name=tag::${GITHUB_REF#refs/tags/}"
  #       id: tag
  #     - uses: actions/create-release@v1
  #       id: create-release
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         tag_name: ${{ steps.tag.outputs.tag }}
  #         release_name: Release ${{ steps.tag.outputs.tag }}
  #     - uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create-release.outputs.upload_url }}
  #         asset_path: CourseLore--windows--${{ github.sha }}.exe
  #         asset_name: CourseLore--windows--${{ steps.tag.outputs.tag }}.exe
  #         asset_content_type: application/vnd.microsoft.portable-executable
  #     - uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create-release.outputs.upload_url }}
  #         asset_path: CourseLore--macos--${{ github.sha }}.app.tgz
  #         asset_name: CourseLore--macos--${{ steps.tag.outputs.tag }}.app.tgz
  #         asset_content_type: application/gzip
  #     - uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create-release.outputs.upload_url }}
  #         asset_path: courselore--linux--${{ github.sha }}.tgz
  #         asset_name: courselore--linux--${{ steps.tag.outputs.tag }}.tgz
  #         asset_content_type: application/gzip